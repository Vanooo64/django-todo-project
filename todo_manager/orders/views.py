from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import TemplateView, ListView, DeleteView,CreateView
from notifications.models import Notification

from .forms import OrderForm, BidForm
from .models import Order, Bid
from django.shortcuts import get_object_or_404, redirect, render
from django.contrib.auth.decorators import login_required
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
import json
from django.utils import timezone
from datetime import timedelta


class OrderCreateView(CreateView):
    model = Order
    form_class = OrderForm

    def form_valid(self, form):
        form.instance._current_user = self.request.user
        return super().form_valid(form)
    
    def get_success_url(self):
        return self.object.get_absolute_url(self.request.user)



class OrderListCustomerView(LoginRequiredMixin, ListView): #—Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∑–∞–º–æ–≤–Ω–∏–∫–∞
    model = Order
    template_name = 'orders/components/orders_customer_list.html'
    context_object_name = 'orders'

    def get_queryset(self):
        user = self.request.user
        return Order.objects.filter(customer=user)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        context['customer_orders'] = Order.objects.filter(customer=user)
        return context


class OrderListExecutorView(LoginRequiredMixin, ListView): #—Å–ø–∏—Å–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    model = Order
    template_name = 'orders/orders_executor_list.html'
    context_object_name = 'orders'

    def get_queryset(self):
        user = self.request.user
        return Order.objects.filter(executor=user)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        user = self.request.user
        context['executor_orders'] = Order.objects.filter(executor=user)
        return context


class OrderShowViewCustomer(DeleteView):
    model = Order
    context_object_name = 'order'
    template_name = 'orders/customer/show_detail_customer.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['bids'] = Bid.objects.filter(order=self.object).select_related('executor')
        return context



class OrderShowViewExecutor(DeleteView):
    model = Order
    template_name = 'orders/executor/show_detail_executor.html'



@login_required                                                           #–¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó –º–∞—é—Ç—å –ª–∏—à–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ.
def submit_bid(request, order_id):                                        #order_id –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ —á–∞—Å—Ç–∏–Ω–∞ URL —ñ –≤–∏–∑–Ω–∞—á–∞—î —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –¥–æ —è–∫–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –ø–æ–¥–∞—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.
    order = get_object_or_404(Order, pk=order_id)                         #–û—Ç—Ä–∏–º—É—î—Ç—å—Å—è –æ–±'—î–∫—Ç –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –º–æ–¥–µ–ª—ñ Order –∑–∞ –ø–µ—Ä–≤–∏–Ω–Ω–∏–º –∫–ª—é—á–µ–º order_id, –∞–±–æ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞ 404
    existing_bid = Bid.objects.filter(order=order, executor=request.user).first()  #–ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –Ø–∫—â–æ —Ç–∞–∫–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è —ñ—Å–Ω—É—î, –≤–æ–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –∑–º—ñ–Ω–Ω—ñ–π executing_bid.
    
    if request.method == 'POST':  #–Ø–∫—â–æ –∑–∞–ø–∏—Ç —î POST —ñ –≤–∂–µ —ñ—Å–Ω—É—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Ç–æ:
        form = BidForm(request.POST, instance=existing_bid)  #–°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —Ñ–æ—Ä–º–∞ –∑ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏, —è–∫–∞ –∑–∞–ø–æ–≤–Ω—é—î—Ç—å—Å—è –¥–∞–Ω–∏–º–∏ —ñ—Å–Ω—É—é—á–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.
        if form.is_valid():  #–Ø–∫—â–æ —Ñ–æ—Ä–º–∞ –≤–∞–ª—ñ–¥–Ω–∞:
            bid = form.save(commit=False)  #–ó–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –æ–±'—î–∫—Ç Bid, –∞–ª–µ —â–µ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.
            bid.executor = request.user  #–ó–∞–¥–∞—î—Ç—å—Å—è –ø–æ–ª–µ executor (–ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á).
            bid.order = order  #–ó–∞–¥–∞—î—Ç—å—Å—è –ø–æ–ª–µ order (–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è).
            bid.save()  #–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.

            if bid.comment or bid.price:
                channel_layer = get_channel_layer()
                async_to_sync(channel_layer.group_send)(
                    f'chat_order_{order.id}',
                    {
                        'type': 'chat_message',
                        'message': f"üí∞ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è: {bid.price} –≥—Ä–Ω\nüìù –ö–æ–º–µ–Ω—Ç–∞—Ä: {bid.comment or '(–±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è)'}",
                        'sender': request.user.username,
                    }   
                ) #–Ø–∫—â–æ —î –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ —Ü—ñ–Ω–∞, —Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É —á–∞—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.
            
            return redirect(order.get_absolute_url(request.user))  #–ü—ñ—Å–ª—è —á–æ–≥–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    else:  #–Ø–∫—â–æ —Ü–µ GET-–∑–∞–ø–∏—Ç –∞–±–æ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –≤—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
        form = BidForm(instance=existing_bid)  #–°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —Ñ–æ—Ä–º–∞ –∑ –¥–∞–Ω–∏–º–∏ —ñ—Å–Ω—É—é—á–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, —è–∫—â–æ –≤–æ–Ω–∞ —î, –∞–±–æ –ø–æ—Ä–æ–∂–Ω—è —Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è.
    # –ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —à–∞–±–ª–æ–Ω –∑ —Ñ–æ—Ä–º–æ—é –ø–æ–¥–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.



    return render(request, 'orders:submit_bid', {
        'form': form, 
        'order': order,
        'existing_bid': existing_bid, 
    }) #–ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —à–∞–±–ª–æ–Ω –∑ —Ñ–æ—Ä–º–æ—é –ø–æ–¥–∞–Ω–Ω—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.


@login_required
def select_executor(request, order_id, bid_id):
    order = get_object_or_404(Order, pk=order_id, customer=request.user)
    bid = get_object_or_404(Bid, pk=bid_id, order=order)

    order.executor = bid.executor
    order.status = Order.Status.AT_WORK
    order.order_amount = bid.price
    order.save()

    bid.is_selected = True
    bid.save()

    # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
    order.bids.exclude(pk=bid.pk).update(is_selected=False)

    # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è
    Notification.objects.create(
        user=bid.executor,
        message=f"–í–∞—Å –æ–±—Ä–∞–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è '{order.title}'",
        order=order
    )

    return redirect(order.get_absolute_url(request.user))


@login_required
def orders_where_user_executor(request): # –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ —è–∫–∏—Ö executor "–í–∞—Å –æ–±—Ä–∞–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü–µ–º"
    orders = Order.objects.filter(executor=request.user)
    return render(request,'orders/executor/orders_where_user_executor.html', {"orders": orders})


@login_required
def orders_with_suggested_prices_executor(request): # –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω—å –≤ —è–∫–∏—Ö executor "–∑—Ä–æ–±–∏–≤ —Å—Ç–∞–≤–∫—É"
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ Bid —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bids = Bid.objects.filter(executor=request.user).select_related('order')
    # –í–∏—Ç—è–≥—É—î–º–æ id –∑–∞–º–æ–≤–ª–µ–Ω—å, –¥–µ —î —Å—Ç–∞–≤–∫–∏ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    order_ids = bids.values_list('order_id', flat=True).distinct()
    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ —Ü–∏–º id
    orders = Order.objects.filter(id__in=order_ids)

    return render(request,'orders/executor/orders_with_suggested_prices_executor.html', {"orders": orders})


@login_required
def search_new_orders_executor(request):  # –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑ –Ω–æ–≤–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏ –¥–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Å—Ç–∞–≤–∫—É (–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–Ω—ñ)
    three_days_ago = timezone.now() - timedelta(days=3)
    orders = Order.objects.filter(
        status=Order.Status.NOT_PERFORMER,
        executor__isnull=True,
        time_create__gte=three_days_ago
    )
    return render(request, 'orders/executor/search_new_orders_executor.html', {'orders': orders})
