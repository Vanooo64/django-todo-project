import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.contrib.auth import get_user_model
from asgiref.sync import sync_to_async
from chat.models import Chat, Message
from django.core.files.base import ContentFile
from orders.models import Order

User = get_user_model()

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        """ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è WebSocket –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ —á–∞—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è """
        self.order_id = str(self.scope['url_route']['kwargs']['order_id'])  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `order_id`
        self.room_group_name = f'chat_order_{self.order_id}'  # –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è –≥—Ä—É–ø–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        self.user = self.scope.get("user")

        print(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {self.order_id} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {self.user}")

        if not self.user.is_authenticated:
            print("–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø ‚Äî –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")
            await self.close()
            return

        access_granted = await self.user_has_chat_access(self.user)
        if not access_granted:
            print(f"–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {self.user}")
            await self.close()
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ `order_id`
        self.chat = await self.get_chat()

        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥—Ä—É–ø–∏ WebSocket –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        await self.channel_layer.group_add(self.room_group_name, self.channel_name)
        await self.accept()

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        history = await self.load_history()

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –∫–ª—ñ—î–Ω—Ç—É
        await self.send(text_data=json.dumps({
            'type': 'chat_history',
            'history': history
        }))

    async def disconnect(self, close_code):
        """ –í—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è WebSocket –≤—ñ–¥ –≥—Ä—É–ø–∏ —á–∞—Ç—É """
        await self.channel_layer.group_discard(self.room_group_name, self.channel_name)

    async def receive(self, text_data):
        """ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –π–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—ñ """
        data = json.loads(text_data)

        message = data.get('message', '')
        comment = data.get('comment')
        price = data.get('price')

        sender_user = self.scope.get("user")

        # üßº –Ø–∫—â–æ comment —ñ message –æ–¥–Ω–∞–∫–æ–≤—ñ ‚Äî –Ω–µ –∑–±–µ—Ä—ñ–≥–∞–π message —è–∫ –æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if comment and message and comment.strip() == message.strip():
            message = ''

        if sender_user and sender_user.is_authenticated:
            sender = sender_user.username

            # üîê –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –±—É–¥—å-—è–∫–æ–≥–æ –≤–º—ñ—Å—Ç—É
            if message or comment or price:
                saved_message = await self.save_message(
                    sender_user.id,
                    message,
                    comment,
                    price
                )
            else:
                saved_message = None
        else:
            sender = "–ê–Ω–æ–Ω—ñ–º"
            saved_message = None


        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —É –≥—Ä—É–ø—É, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î `order_id`
        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message,
                'sender': sender,
                'timestamp': saved_message.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
                'comment': comment or '',
                'price': str(price) if price else ''
            }
        )

    async def chat_message(self, event):
        """ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É WebSocket –∫–ª—ñ—î–Ω—Ç–∞–º —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ """
        await self.send(text_data=json.dumps({
            'type': 'chat_message',
            'message': event['message'],
            'sender': event['sender'],
            'timestamp': event.get('timestamp', ''),
            'comment': event.get('comment', ''),
            'price': str(event.get('price', '')) if event.get('price') else ''
        }))

    @database_sync_to_async
    def save_message(self, sender_id, text, comment=None, price=None):
        """ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–∏–≤‚Äô—è–∑–∫–æ—é –¥–æ `order_id` """
        sender = User.objects.get(id=sender_id)
        order = Order.objects.get(id=self.order_id)  # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—é
        chat, created = Chat.objects.get_or_create(order=order)
        return Message.objects.create(chat=chat, sender=sender, text=text, comment=comment, price=price)

    @database_sync_to_async
    def get_chat(self):
        """ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ `order_id` """
        order = Order.objects.get(id=self.order_id)

        chat, created = Chat.objects.get_or_create (
            order=order, 
            customer=order.customer,                                
        )

        # –Ø–∫—â–æ —á–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ —î –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
        if created and order.executor:
            chat.executor = order.executor
            chat.save()

        return chat

    @database_sync_to_async
    def load_history(self):
        """ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —Ç—ñ–ª—å–∫–∏ –¥–ª—è `order_id` """
        order = Order.objects.get(id=self.order_id)
        chat = Chat.objects.filter(order=order).first()
        if not chat:

            return []
        messages = Message.objects.filter(chat=chat).order_by("timestamp")
        return [{
            "sender": msg.sender.username, 
            "message": msg.text, 
            "timestamp": msg.timestamp.strftime('%Y-%m-%d %H:%M:%S'),
            "comment": msg.comment, 
            "price": str(msg.price) if msg.price is not None else ''
        } for msg in messages]
    
    @database_sync_to_async
    def user_has_chat_access(self, user):
        """ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —á–∞—Ç—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è """
        from orders.models import Bid
        order = Order.objects.get(id=self.order_id)

        is_customer = order.customer == user
        is_executor = order.executor == user
        has_bid = Bid.objects.filter(order=order, executor=user).exists()
       
        return is_customer or is_executor or has_bid


